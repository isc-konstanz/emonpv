#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""    
    Predicts the yield of photovoltaic energy systems by a given solar irradiance forecast
    
"""
import logging
logger = logging.getLogger('pvyieldprediction')

import os
import datetime

from configparser import ConfigParser

import numpy as np
import pvprediction as pv


def main(args=None):
    logger.info('Starting pvyieldprediction')
    
    here = os.path.abspath(os.path.dirname(__file__))
    args = _get_parser().parse_args()
    
    if (args.configdir != None):
        configdir = args.configdir
    else:
        configdir = os.path.join(os.path.dirname(here), 'conf')
    
    settingsfile = os.path.join(configdir, 'settings.cfg')
    settings = ConfigParser()
    settings.read(settingsfile)
    
    if (args.weatherdir != None):
        weatherdir = args.weatherdir
    else:
        weatherdir = str(settings.get('General','datadir'))
    
    try:
        forecast = pv.weather.forecast(datetime.datetime.now(), 
                                       settings.get('Location','timezone'), 
                                       var=os.path.join(weatherdir, settings.get("DWD","key")), 
                                       method='DWD_CSV')
        
        systems = pv.systems.read(configdir)
        
    #     if args.optimize:
        
        yieldprediction = pv.predict.energy(systems, forecast)
        
        if (args.simdir != None):
            simdir = args.simdir
        else:
            simdir = str(settings.get('General','datadir'))
        
        filename = forecast.key + '_yield.csv';
        filepath = os.path.join(simdir, filename)
        
        yieldprediction.index = yieldprediction.index.tz_convert('UTC').astype(np.int64)//10**6
        yieldprediction.index.name = 'time'
        yieldprediction.to_csv(filepath, sep=',', encoding='utf-8')

    except IOError as e:
        logger.error('Error while predicting energy yield: %s', e.message)

def _get_parser():
    from argparse import ArgumentParser
    
    parser = ArgumentParser(description=__doc__)
    
    parser.add_argument('-c','--config', 
                        dest='configdir',
                        help="Directory of system configuration files", 
                        metavar='DIR')
    parser.add_argument('-w','--weather', 
                        dest='weatherdir',
                        help="Directory of solar irradiance and temperature files", 
                        metavar='DIR')
    parser.add_argument('-s','--simulation', 
                        dest='simdir',
                        help="Directory in which simulation output files will be placed", 
                        metavar='DIR')
    parser.add_argument('-o','--optimize', 
                        action="store_true", 
                        default=False, 
                        help='Enables efficiency optimization')
    return parser


if __name__ == "__main__":
    main()