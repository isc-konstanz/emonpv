#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    db_build
    ~~~~~
    
    ...

"""
import logging
logger = logging.getLogger('db_build')
import os
import pandas as pd
import io
import json
import re
from jsonmerge import merge
try:
    from urllib2 import urlopen
except ImportError:
    from urllib.request import urlopen


def main(args=None):
    logger.info('Starting db_build')
    
    here = os.path.abspath(os.path.dirname(__file__))
    args = _get_parser().parse_args()
    
    if (args.csv_dir != None):
        csv_dir = args.csv_dir
        logger.debug('CSV files will be read in from "%s"', csv_dir)
    else:
        csv_dir = os.path.join(os.path.dirname(here), 'bin\csv')
    
    if (args.json_dir != None):
        json_dir = args.json_dir
        logger.debug('JSON files will be read in from and written to "%s"', json_dir)
    else:
        json_dir = os.path.join(os.path.dirname(here), 'bin\json')
    
    if (args.destination != None):
        destination = args.destination
        logger.debug('Directory structure will be created in "%s"', destination)
    else:
        destination = os.path.join(os.path.dirname(here), 'bin\db')
    
    if (args.merge):
        logger.info('Merging ...')
        merge_df(json_dir, csv_dir)
        logger.info('Merged SAM and CEC libraries')
    if (args.meta):
        logger.info('Creating meta data ...')
        create_meta_json(json_dir, 'merged.json')
        logger.info('Meta data created')
    if (args.build):
        logger.info('Creating directory structure ...')
        create_directory_structure(json_dir, destination, 'merged.json')
        logger.info('Directory structure created')

    logger.info('db_build successful')

def _parse_raw_sam_df(csvdata, sep=','):
    df = pd.read_csv(csvdata, skiprows=[1, 2], sep=sep, encoding = "ISO-8859-1")
    colnames = df.columns.values.tolist()
    parsedcolnames = []
    for cn in colnames:
        parsedcolnames.append(cn.replace(' ', '_'))

    df.columns = parsedcolnames

    df = df.transpose()
    if 'ADRCoefficients' in df.index:
        ad_ce = 'ADRCoefficients'
        # for each inverter, parses a string of coefficients like
        # ' 1.33, 2.11, 3.12' into a list containing floats:
        # [1.33, 2.11, 3.12]
        df.loc[ad_ce] = df.loc[ad_ce].map(lambda x: list(
            map(float, x.strip(' []').split())))

    return df 

def get_module_full_list_df(csv_dir, db_name = 'PV_Module_List_Full_Data'):
    print(csv_dir)
    data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), csv_dir)
    csvdata = os.path.join(data_path, db_name + '.csv')
    df =_parse_raw_sam_df(csvdata, ';')
    df = df.transpose()
    return df.rename(index=str, columns={'?Pmax': 'gamma_Pmax', '?Isc': 'alpha_Isc', '?Voc': 'beta_Voc', '?Ipmax': 'alpha_Ipmax',
                                        '?Vpmax': 'beta_Vpmax', 'Average_NOCT': 'T_NOCT', 'Nameplate_Isc': 'I_sc_ref',
                                        'Nameplate_Voc': 'V_oc_ref', 'Nameplate_Ipmax': 'I_mp_ref', 'Nameplate_Vpmax': 'V_mp_ref',
                                        'Adj': 'Adjust', 'gamma_Pmax': 'gamma_R'})

def create_module_full_list_json(json_dir, db_name = 'PV_Module_List_Full_Data'):
    df = get_module_full_list_df(db_name = db_name)
    df['Model_Number'] = df['Model_Number'].apply(lambda x: x.replace('/ ', '').replace(' /', '').replace('/', ' '))
    cols = list(df.keys())
    cols.remove('Manufacturer')
    cols.remove('Model_Number')
    df = df.groupby('Manufacturer').apply(lambda x: x.set_index('Model_Number')[cols].to_dict(orient='index'))
    
    with open(json_dir + '/' + db_name + ".json", 'w') as f:
        f.write(json.dumps(json.loads(df.to_json(orient='columns')), indent=2))

def get_module_sam_df(csv_dir = 'https://raw.githubusercontent.com/pvlib/pvlib-python/master/pvlib/data', download=True, db_name = 'sam-library-cec-modules-2017-6-5'):
    if download:
        response = urlopen(csv_dir + '/' + db_name + '.csv')
        csvdata = io.StringIO(response.read().decode(errors='ignore'))
    else:
        data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), csv_dir)
        csvdata = os.path.join(data_path, db_name + '.csv')
    df =_parse_raw_sam_df(csvdata)
    return df.transpose()

def create_module_sam_json(json_dir, db_name = 'sam-library-cec-modules-2017-6-5'):
    df = get_module_sam_df(db_name = db_name)
    
    df['Manufacturer'], df['Model Number'] = df['Name'].str.split(' ', 1).str
    
    cols = list(df.keys())
    cols.remove('Manufacturer')
    cols.remove('Model Number')
    cols.remove('Name')
    df = df.groupby('Manufacturer').apply(lambda x: x.set_index('Model Number')[cols].to_dict(orient='index'))
    with open(json_dir + '/' + db_name+'.json', 'w') as f:
        f.write(json.dumps(json.loads(df.to_json(orient='columns')), indent=2))
   
def create_module_sam_json_parsed(json_dir, db_name = 'sam-library-cec-modules-2017-6-5'):
    #'sam-library-cec-inverters-2018-3-18'#'sam-library-cec-modules-2017-6-5'
    #response = urlopen('https://sam.nrel.gov/sites/default/files/'+db_name+'.csv')
    response = urlopen('https://raw.githubusercontent.com/pvlib/pvlib-python/master/pvlib/data/'+db_name+'.csv')
    csvdata = io.StringIO(response.read().decode(errors='ignore'))
    df =_parse_raw_sam_df(csvdata)
    df = df.transpose()
    
    df['Manufacturer'], df['Model Number'] = df['Name'].str.split(' ', 1).str
    t1, t2 = [], []
    for s in df['Name']:
        t = re.compile(r'[ ](?=([A-Za-z]*[\s-]?([0-9]|([a-zA-Z0-9]-))[0-9a-zA-Z\)\(<>\s-]*))').split(s)
        if len(t) > 1:
            if 'EPV-40' in t[0]:
                t1.append('EPV Solar')
                t2.append('EPV-40')
            else:
                t1.append(t[0].rstrip())
                t2.append(t[1].rstrip())
        else:
            t1.append(t[0].split(' ')[0])
            t2.append(t[0].split(' ')[1])
    
    df['Manufacturer'], df['Model Number'] = t1, t2
    
    cols = list(df.keys())
    cols.remove('Manufacturer')
    cols.remove('Model Number')
    cols.remove('Name')
    df = df.groupby('Manufacturer').apply(lambda x: x.set_index('Model Number')[cols].to_dict(orient='index'))
    with open(json_dir + '/' + db_name+'.json', 'w') as f:
        f.write(json.dumps(json.loads(df.to_json(orient='columns')), indent=2))

def merge_json(json_dir, json_base = 'PV_Module_List_Full_Data.json', json_head = 'sam-library-cec-modules-2017-6-5.json'):
    data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), json_dir)
    base = os.path.join(data_path, json_base)
    with open(base) as json_data:
        base = json.load(json_data)
    head = os.path.join(data_path, json_head)
    with open(head) as json_data:
        head = json.load(json_data)
    
    with open(json_dir + "/cec-modules-2017-6-5_merged.json", 'w') as f:
        json.dump(merge(base, head), f, indent=2)

def merge_df(json_dir, csv_dir):
    cec = get_module_full_list_df(csv_dir)
    sam = get_module_sam_df(csv_dir, False, 'cec_module')
    cec['Name'] = pd.Series(cec['Manufacturer'] + ' ' + cec['Model_Number'], cec.index)
    df = cec.merge(sam, on=['Name'], how='right')
    cols = list(df.keys())
    
    cdel = [c for c in cols if '_x' in c]
    df = df.drop(cdel, axis=1)
    cols = [c.replace('_y', '') for c in list(df.keys())]
    df.columns = cols
    
    df['Manufacturer_Key'] = df['Manufacturer'].str.replace(' ', '_').str.replace('(', '_').str.replace(')', '_').str.replace('[', '_').str.replace(']', '_').str.replace('.', '_').str.replace(',', '_').str.replace('-', '_').str.replace('/', '_').str.replace('\\', '_').str.lower()
    df['Model_Number_Key'] = df['Model_Number'].str.replace(' ', '_').str.replace('(', '_').str.replace(')', '_').str.replace('[', '_').str.replace(']', '_').str.replace('.', '_').str.replace(',', '_').str.replace('-', '_').str.replace('/', '_').str.replace('\\', '_').str.lower()
    df = df.groupby('Manufacturer_Key').apply(lambda x: x.set_index('Model_Number_Key')[cols].to_dict(orient='index'))

    with open(json_dir + "/merged.json", 'w') as f:
        f.write(json.dumps(json.loads(df.to_json(orient='columns')), indent=2))
    

def create_meta_json(json_dir, jsonFrom = 'cec-modules-2017-6-5_merged.json'):
    data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), json_dir)
    j = os.path.join(data_path, jsonFrom)
    with open(j) as json_data:
        d = json.load(json_data)
        for k, v in d.items():
            for k2, v2 in v.items():
                data = dict((key , info) for key, info in v2.items() if key in ['Manufacturer', 'Model_Number', 'Description', 'BIPV'])
                d[k][k2] = data
        with open(json_dir + "/PV_Module_List_Meta.json", 'w') as f:
            json.dump(d, f, indent=2)

def create_directory_structure(json_dir, destination, jsonFrom = 'cec-modules-2017-6-5_merged.json'):
    data_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), json_dir)
    j = os.path.join(data_path, jsonFrom)
    
    with open(j) as json_data:
        for manufacturer, modules in json.load(json_data).items():
            for module, data in modules.items():
                ma = manufacturer.strip()
                mo = module.strip()
                directory = os.path.dirname(destination + '/' + ma + '/' + mo + '.json')
                if not os.path.exists(directory):
                    os.makedirs(directory)
                with open(destination + '/' + ma + '/' + mo + '.json', 'w') as f:
                    json.dump(data, f, indent=2)


def _get_parser():
    from argparse import ArgumentParser
    
    parser = ArgumentParser(description=__doc__)
    
    parser.add_argument('-c','--csv', 
                        dest='csv_dir',
                        help="Directory of csv files")
    parser.add_argument('-j','--json', 
                        dest='json_dir',
                        help="Directory of json files")
    parser.add_argument('-d','--destination', 
                        dest='destination',
                        help="Destination of final directory structure")
    parser.add_argument('--build', help="Creates the database directory structure", action='store_const', const=True, default=False)
    parser.add_argument('--merge', help="Merges SAM and CEC libraries", action='store_const', const=True, default=False)
    parser.add_argument('--meta', help="Creates a meta json dump", action='store_const', const=True, default=False)
    return parser


if __name__ == "__main__":
    main()