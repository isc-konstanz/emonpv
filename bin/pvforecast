#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
    pvforecast
    ~~~~~~~~~~
    
    To learn how to configure the photovoltaic forecast, see "pvforecast --help"

"""
import logging.config

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(sys.argv[0])))

import inspect
import textwrap
import pytz as tz
import datetime as dt

from argparse import ArgumentParser, RawTextHelpFormatter
from configparser import ConfigParser


def forecast(settings, time):
    from pvforecast import DatabaseList, SystemList, Weather
    
    database = DatabaseList(settings)
    systems = SystemList(settings, database)
    weather = Weather(settings, database, model=settings.get('Weather', 'model'))
    
    systems.forecast(weather, time)


def schedule_forecast(scheduler, interval, time, settings):
    forecast(settings, time)
    
    time, delay = schedule_time(interval)
    scheduler.enter(delay, 1, forecast, 
                    (scheduler, interval, time, settings))


def schedule_time(interval):
    now = dt.datetime.now(tz.utc)
    time = now.replace(minute=0, second=0, microsecond=0)
    if now.hour % (interval/60) != 0:
        time = time + dt.timedelta(minutes=interval) - dt.timedelta(hours=now.hour % (interval/60))
    
    return time, (time + dt.timedelta(minutes=interval) - now).total_seconds()


def run(settings):
    interval = int(settings.get('General', 'interval'))
    
    time,_ = schedule_time(interval)
    forecast(settings, time)


def start(settings):
    import sched, time
    
    logger.info('Starting pvforecast')
    
    interval = int(settings.get('General', 'interval'))
    
    scheduler = sched.scheduler(time.time, time.sleep)
    schedule_date, _ = schedule_time(interval)
    schedule_forecast(scheduler, interval, schedule_date, settings)
    scheduler.run()


def build(settings):
    from pvforecast.database import ModuleDatabase
    
    logger.info('Starting pvforecast module library build')
    
    db = ModuleDatabase(settings)
    db.build()


def main(settings, args=None):
    settings.set('General', 'datadir', args.datadir)
    settings.set('General', 'configdir', args.configdir)
    
    if args.action == 'run':
        run(settings)
    
    elif args.action == 'start':
        start(settings)
    
    elif args.action == 'build':
        build(settings)


def _get_parser(settings, configdir):
    from pvforecast import __version__
    parser = ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
    
    parser.add_argument('action',
                        help=textwrap.dedent("""\
                            run:   Retrieve the latest weather forecast and provide consequently photovoltaic yield
                            start: Starts the ongoing calculation of photovoltaic yield in a regular interval
                            learn: Process passed measurement values to train the learning algorithm
                            build: Build the current photovoltaic module library
                            """),
                        choices=('run', 'start', 'learn', 'build'))
    
    parser.add_argument('-c','--config',
                        dest='configdir',
                        help="directory of configuration files",
                        default=configdir,
                        metavar='DIR')
    
    parser.add_argument('-d','--data',
                        dest='datadir',
                        help="writable directory where certain configuration files may be found or results will be stored in",
                        default=settings.get('General', 'datadir'),
                        metavar='DIR')
    
    parser.add_argument('-v', '--version',
                        action='version',
                        version='%(prog)s {version}'.format(version=__version__))
    
    return parser


if __name__ == "__main__":
    rundir = os.path.dirname(os.path.abspath(inspect.getsourcefile(main)))
    if os.path.basename(rundir) == 'bin':
        rundir = os.path.dirname(rundir)
    
    configdir = os.path.join(rundir, 'conf')
    
    # Load the logging configuration
    loggingfile = os.path.join(configdir, 'logging.cfg')
    logging.config.fileConfig(loggingfile)
    logger = logging.getLogger('pvforecast')
    
    settingsfile = os.path.join(configdir, 'settings.cfg')
    if not os.path.isfile(settingsfile):
        logger.error('Unable to read settings at %s', settingsfile)
        sys.exit(1)
    
    settings = ConfigParser()
    settings.read(settingsfile)
    
    main(settings, args=_get_parser(settings, configdir).parse_args())

